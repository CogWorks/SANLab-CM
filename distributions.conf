(defdist "Constant"
"Returns a constant value."
("Constant")
(nil)
(lambda ; start lambda
(const)
const
) ; end lambda
) ; end defdist

(defdist "Gaussian"
"Returns a random value drawn from a normal distribution specified by the given parameters. Based on the Polar method."
("Mean" "St. Dev.")
(nil nil)
(lambda ; start lambda
(mean stdev)
(let* ((X nil)
       (Y nil)
       (R2 nil))
  (loop
   (setf X (- (* 2 (random 1.0)) 1))
   (setf Y (- (* 2 (random 1.0)) 1))
   (setf R2 (+ (* X X) (* Y Y)))
   (when (and (not (= r2 0)) (< R2 1)) (return)))
  (+ mean (* stdev (* (sqrt (* -2 (/ (log R2) R2))) Y))))
) ; end lambda
) ; end defdist

(defdist "Gaussian CV"
"Returns a random value drawn from a normal distribution specified by the given parameters. Based on the Polar method."
("Mean" "Coefficient of Variance")
(nil nil)
(lambda ; start lambda
(mean cv)
(let ()
  (call-distribution "Gaussian" mean (* mean cv))
)
) ; end lambda
) ; end defdist

(defdist "Gamma 1"
"Not really sure what this does."
("Iterations")
(nil)
(lambda ; start lambda
(v)
(let ((sum 0.0))
  (dotimes (i v)
    (incf sum (log (random 1.0))))
  (- sum))
) ; end lambda
) ; end defdist

(defdist "Beta"
"Picks random values from a beta distribution."
("A" "B" "Alpha" "Beta")
(nil nil nil nil)
(lambda ; start lambda
(a b alpha beta)
(let* ((ga (call-distribution "Gamma" alpha))
       (gb (call-distribution "Gamma" beta))
       (result (/ ga (+ ga gb))))
  (+ (* b result) (* a (- 1 result))))
) ; end lambda
) ; end defdist

(defdist "Beta CV"
"Picks random values from a beta distribution."
("A" "B" "Mean adjusted" "Coefficient of Variation adjusted")
(nil nil nil nil)
(lambda ; start lambda
(a b m-adj cv-adj)
(let* ((m (/ (- m-adj a) (- b a)))
       (cv (* cv-adj (/ m-adj (- m-adj a))))
       (alpha (- (/ (+ -1 m (* cv cv m)) (* cv cv))))
       (beta (/ (* (+ m -1) (+ -1 m (* cv cv m))) (* cv cv m))))
  (if (or (< alpha 0) (< beta 0))
      (error "Invalid parameters for beta distribution."))
  (call-distribution "Beta" a b alpha beta))
) ; end lambda
) ; end defdist

(defdist "Gamma"
"Returns a random value drawn from a gamma distribution specified by the given parameters."
("A" "B")
(nil nil)
(lambda ; start lambda
(a &optional (b 1.0))
(if (< a 1)
    (* b (call-distribution "Gamma Berman" a))
  (* b (call-distribution "Gamma Cheng" a)))
) ; end lambda
) ; end defdist

(defdist "Gamma CV"
"Returns a random value draw from a gamma distribution given a mean value and a coefficient of variation."
("Mean" "Coefficient of Variation")
(nil nil)
(lambda ; start lambda
(mean cv)
(call-distribution "Gamma"
                   (/ 1 (expt cv 2))
                   (* (expt cv 2) mean))
) ; end lambda
) ; end defdist

(defdist "Gamma Cheng"
"Helper function for a gamma distribution"
("A")
(nil)
(lambda ; start lambda
(a)
(let ((b (- a (log 4)))
      (c (+ a (sqrt (- (* 2 a) 1))))
      (l (sqrt (- (* 2 a) 1)))
      (U 0.0) (V 0.0)
      (X 0.0) (Y 0.0)
      (Z 0.0) (R 0.0))
  (loop
   (setf U (non-zero-random 1.0))
   (setf V (non-zero-random 1.0))
   (setf Y (* (/ 1 l) (log (/ V (- 1 V)))))
   (setf X (* a (exp Y)))
   (setf Z (* U V V))
   (setf R (+ b (* c Y) (- X)))
   (if (>= R (- (* (/ 9 2) Z) (+ 1 (log (/ 9 2)))))
       (return X))
   (if (>= R (log Z))
       (return X)))
  )
) ; end lambda
) ; end defdist

(defdist "Gamma Berman"
"Helper function for a gamma distribution"
("A")
(nil)
(lambda ; start lambda
(a)
(loop
 (let* ((U (random 1.0))
        (V (random 1.0))
        (X (expt U (/ 1 a)))
        (Y (expt V (/ 1 (- 1 a)))))
   (when (<= (+ X Y) 1)
     (return (* (call-distribution "Gamma Cheng" 2) X)))))
) ; end lambda
) ; end defdist

(defdist "Exponential"
"Picks a random value on an exponential curve."
("Lambda")
(nil)
(lambda ; start lambda
(R)
(* (- R) (log (random 1.0)))
) ; end lambda
) ; end defdist

(defdist "Exponential Gaussian"
""
("Mean" "Standard Deviation" "Lambda")
(nil nil nil)
(lambda
(mean stdev R)
(+ (call-distribution "Gaussian" mean stdev)
   (call-distribution "Exponential" R))
) ; end lambda
) ; end defdist

(defdist "Logarithmic Gaussian"
""
("Mean" "Standard Deviation")
(nil nil)
(lambda ; start lambda
(mean stdev)
(let ((m (/ (* mean mean) (sqrt (+ (* mean mean) (* stdev stdev)))))
      (s (sqrt (log (+ 1 (/ (* stdev stdev) (* mean mean)))))))
  (* m (exp (* s (call-distribution "Gaussian" 0 1)))))
) ; end lambda
) ; end defdist

(defdist "Logarithmic Gaussian CV"
""
("Mean" "Coefficient of Variation")
(nil nil)
(lambda ; start lambda
(mean cv)
(call-distribution "Logarithmic Gaussian"
                   mean
                   (* mean cv))
) ; end lambda
) ; end defdist

(defdist "Weibull"
""
("Alpha" "Beta")
(nil nil)
(lambda ; start lambda
(alpha beta)
(* alpha (expt (- (log (random 1.0))) (/ 1 beta)))
) ; end lambda
) ; end defdist

(defdist "Uniform"
""
("Lower" "Upper")
(nil nil)
(lambda ; start lambda
(a b)
(+ a (random (float (- b a))))
) ; end lambda
) ; end defdist

(defdist "Uniform CV"
""
("Mean" "Coefficient of Variation")
(nil nil)
(lambda ; start lambda
(m cv)
(let ((a (- m (* (sqrt 3) cv m)))
      (b (+ m (* (sqrt 3) cv m))))
  (call-distribution "Uniform" a b))
) ; end lambda
) ; end defdist
