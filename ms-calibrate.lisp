(defparameter *debug-calibrate* nil)
(defparameter *save-dir* "~/sanlab/Models/temp/")
(defparameter *limit-data-ingest* t)

(defconstant *w-prime-mapping*
;         1      2      3      4      5      6      7      8      9     10     11     12     13     14     15
  #2A((nil    medium long   short  short  medium long   short  short  medium long   medium long   long   long  )
      (medium nil    medium medium short  short  short  medium short  medium medium medium long   long   long  )
      (long   medium nil    long   long   medium short  long   long   medium medium long   long   long   long  )
      (short  medium long   nil    short  medium long   short  short  medium long   medium medium long   long  )
      (short  short  long   short  nil    short  medium short  short  short  medium medium medium long   long  )
      (medium short  medium medium short  nil    short  medium short  short  medium medium medium long   long  )
      (long   short  short  long   medium short  nil    long   medium short  short  medium medium long   medium)
      (short  medium long   short  short  medium long   nil    short  medium long   short  medium medium long  )
      (short  short  long   short  short  short  medium short  nil    short  medium short  medium medium medium)
      (medium medium medium medium short  short  short  medium short  nil    short  short  short  medium medium)
      (long   medium medium long   medium medium short  long   medium short  nil    medium short  long   short )
      (medium medium long   medium medium medium medium short  short  short  medium nil    short  short  medium)
      (long   long   long   medium medium medium medium medium medium short  short  short  nil    medium short )
      (long   long   long   long   long   long   long   medium medium medium long   short  medium nil    long  )
      (long   long   long   long   long   long   medium long   medium medium short  medium short  long   nil   )))

(defparameter *the-mapping* *w-prime-mapping*)

(setf (app-property 'current-controller) (make-instance 'controller))

(defmacro print-if (test &rest args)
  `(if ,test
       (format t ,@args)))

(defun read-tab-line (stream)
  (let* ((line (read-line stream nil ""))
         (parts (mapcar #'(lambda (x) (ignore-errors (read-from-string x))) (explode-tab line))))
    parts))

(defclass calib-parser (parser)
  ((event-stream :initform nil :initarg :event-stream :accessor parser-event-stream)
   (fixation-stream :initform nil :initarg :fixation-stream :accessor parser-fixation-stream)
   (count :initform 0 :accessor parser-trial)
   (click-state :initform nil :accessor parser-click-state)
   (last-button :initform 0 :accessor parser-last-button)
   (last-event :initform nil :accessor parser-last-event)
   (last-fixation :initform nil :accessor parser-last-fixation)))

(defmethod initialize-parser ((parser calib-parser))
  ;(setf *fill-gaps* '("Cognitive Operator"))
  (setf *fill-gaps* nil)
  (let (event fixation)
    (setf event (do ((x (read-tab-line (parser-event-stream parser))
                        (read-tab-line (parser-event-stream parser))))
                    (x x)
                  ))
    (setf fixation (do ((x (read-tab-line (parser-fixation-stream parser))
                           (read-tab-line (parser-fixation-stream parser))))
                       ((and x (numberp (first x)) (>= (floor (/ (second x) 1000)) (second event))) x)
                     (setf fixation x)))
    (setf (second fixation) (/ (second fixation) 1000))
    (setf (parser-last-event parser) event)
    (setf (parser-last-fixation parser) fixation)
))

(defmethod parse-item ((parser calib-parser))
  (let (args)
    (do ((event (parser-last-event parser) (parser-last-event parser))
         (fixation (parser-last-fixation parser) (parser-last-fixation parser)))
        ((equal nil event) nil)
      (cond ((or (null fixation) (< (second event) (second fixation)))
             (cond ((equal (parser-click-state parser) 'click)
                    (setf args (make-hash-table))
                    (setf (gethash :end args) (+ (second event) (sixth event)))
                    (setf *insert-items* nil)
                    (cond ((< 0 (parser-last-button parser))
                           (setf (gethash 'valid-trial args) t)
                           (setf (gethash 'condition args) (aref *the-mapping*
                                                                 (1- (parser-last-button parser))
                                                                 (1- (- (ninth event) 80000)))))
                          (t
                           (setf (gethash 'valid-trial args) nil)))
                    (setf (parser-last-button parser) (- (ninth event) 80000))
                    (setf (parser-click-state parser) 'ended)
                    (return (values 'end-trial args)))
                   ((and *limit-data-ingest* (<= 15 (parser-trial parser)))
                    (setf (parser-last-event parser) (read-tab-line (parser-event-stream parser)))
                    )
                   ((equal (third event) 'URLStart)
                    (setf args (make-hash-table))
                    (setf (gethash :start args) (second event))

                    (setf (parser-last-button parser) 0)
                    (setf (parser-trial parser) 0)
                    (setf (parser-last-event parser) (read-tab-line (parser-event-stream parser)))

                    (return (values 'start-trial args)))
                   ((equal (parser-click-state parser) 'ended)
                    (setf args (make-hash-table))
                    (setf (gethash :start args) (+ (second event) (sixth event)))
                    (setf (parser-click-state parser) nil)
                    (setf (parser-last-event parser) (read-tab-line (parser-event-stream parser)))
                    (return (values 'start-trial args)))
                   ((equal (third event) 'URLEnd)
                    (setf args (make-hash-table))
                    (setf (gethash :end args) (second event))
                    (setf (gethash 'valid-trial args) nil)

                    (setf (parser-last-event parser) (read-tab-line (parser-event-stream parser)))

                    (return (values 'end-trial args)))
                   ((equal (third event) 'mouseMvmt)
                    (setf args (make-hash-table))
                    (let ((start (make-hash-table)) (end (make-hash-table)))
                      (setf (gethash 4 start) (second event))
                      (setf (gethash 4 end) (+ (second event) (sixth event)))
                      (setf (gethash :start args) start)
                      (setf (gethash :end args) end)
                      (setf (gethash :label args) (format nil "(~A, ~A)" (fourth event) (fifth event))))

                    (setf (parser-last-event parser) (read-tab-line (parser-event-stream parser)))
                    (print-if *debug-calibrate* "Processed mouse movement~%")

                    (if args
                        (return (values 'mouse-move args))
                      (return 'continue)))
                   ((equal (third event) 'mouseClick)
                    (setf args (make-hash-table))
                    (let ((start (make-hash-table)) (end (make-hash-table)))
                      (setf (gethash 3 start) (second event))
                      (setf (gethash 3 end) (+ (second event) (sixth event)))
                      (setf (gethash :start args) start)
                      (setf (gethash :end args) end)
                      (setf (gethash :label args) 
                            (if (= (ninth event) 9999) "missed"
                              (format nil "tgt~A" (- (ninth event) 80000)))))

                    (cond ((/= (ninth event) 99993)
                           (setf (parser-click-state parser) 'click)
                           (incf (parser-trial parser))
                           (print-if *debug-calibrate* "Processed mouse click~%"))
                          (t
                           (setf (parser-last-event parser) (read-tab-line (parser-event-stream parser)))))

                    (if args
                        (return (values 'mouse-click args))
                      (return 'continue)))
                   (t
                    (setf (parser-last-event parser) (read-tab-line (parser-event-stream parser)))

                    (return 'continue))
                   )
             )
            (fixation
             (cond ((<= 100 (third fixation))
                    (setf args (make-hash-table))
                    (let ((start (make-hash-table))
                          (end (make-hash-table)))
                      (setf (gethash 3 start) (second fixation))
                      (setf (gethash 3 end) (+ (second fixation) (third fixation)))
                      (setf (gethash :start args) start)
                      (setf (gethash :end args) end)
                      (setf (gethash :label args) (format nil "(~A, ~A)" (fourth fixation) (fifth fixation)))
                   )))
             (setf (parser-last-fixation parser)
                   (read-tab-line (parser-fixation-stream parser)))
             (setf (second (parser-last-fixation parser))
                   (floor (/ (second (parser-last-fixation parser)) 1000)))
             (setf fixation (parser-last-fixation parser))
             (do ()
                 ((or (null fixation)
                      (and (numberp (second fixation))
                           (numberp (third fixation)))) nil)
               (setf (parser-last-fixation parser)
                     (read-tab-line (parser-fixation-stream parser)))
               (setf (second (parser-last-fixation parser))
                     (floor (/ (second (parser-last-fixation parser)) 1000)))
               (setf fixation (parser-last-fixation parser)))
             (print-if *debug-calibrate* "Processed eye movement~%")
             (if args
                 (return (values 'eg-fixation args))
               (return 'continue))))))
)

(defun run-calibrate (mouse eye &optional ht (merge t))
  (reset-processor (get-processor))
  (let ((parser (make-instance 'calib-parser
                               :event-stream (open mouse)
                               :fixation-stream (open eye))))
    (let ((result (if ht (run-protocol-analysis parser :merge-trials merge :trials ht) (run-protocol-analysis parser :merge-trials merge))))
      (close (parser-event-stream parser))
      (close (parser-fixation-stream parser))
      (values result parser))))

(defmethod save ((nodes list) (parser calib-parser) path)
  (do ((l nodes (cdr l))
       (i 1 (1+ i)))
      ((null l) nil)
    (setf (app-property 'current-controller) (make-instance 'controller))
    (let ((model (resource-graph-to-sanlab-model (car l)))
          (p (format nil "~A/model~A.san/" path i)))
      (make-sanlab-bundle p)
      (write-model-to-bundle p model))))

(defun get-subject-files (subj)
  (values (format nil "~~/Documents/Younger/P~A-Mouse-Data.txt" subj)
          (format nil "~~/Documents/Younger/P~A-Fixation-Data.tsv" subj)))

(defmethod save-models ((ht hash-table) (subject string))
  (ensure-directories-exist (format nil "~A~A/" *save-dir* subject))
  (maphash #'(lambda (k v)
               (do ((l v (cdr l))
                    (i 1 (1+ i)))
                   ((null l) nil)
                 (setf (app-property 'current-controller) (make-instance 'controller))
                 (let ((model (resource-graph-to-sanlab-model (car l)))
                       (p (format nil "~A~A/~A-~A-~A-~A.san/"
                                  *save-dir* subject subject
                                  k (num-merged-trials (car l)) i)))
                   (make-sanlab-bundle p)
                   (write-model-to-bundle p model))))
           ht)
)

(defun process-all-files ()
  (let ((subjects (remove 705 (remove 703 (loop for i from 701 to 717 collect i))))
        (ht (make-hash-table)))
    (mapcar #'(lambda (i)
                (multiple-value-bind (mouse eye) (get-subject-files i)
                  (save-models (run-calibrate mouse eye) (format nil "P~A" i))
                  (run-calibrate mouse eye ht)))
            subjects)
    (save-models ht "AGG")))

(defun run-one-subject (&optional (s 701))
  (multiple-value-bind (mouse eye) (get-subject-files s)
    (save-models (run-calibrate mouse eye nil nil) (format nil "P~A" s))))
                  

(defparameter *areas-of-interest*
  '((tgt1 . (:rectangle 23 34 27 22))
    (tgt2 . (:rectangle 495 34 27 22))
    (tgt3 . (:rectangle 895 34 27 22))
    (tgt4 . (:rectangle 23 106 27 22))
    (tgt5 . (:rectangle 265 106 27 22))
    (tgt6 . (:rectangle 507 106 27 22))
    (tgt7 . (:rectangle 749 178 27 22))
    (tgt8 . (:rectangle 23 250 27 22))
    (tgt9 . (:rectangle 265 250 27 22))
    (tgt10 . (:rectangle 507 322 27 22))
    (tgt11 . (:rectangle 749 394 27 22))
    (tgt12 . (:rectangle 265 466 27 22))
    (tgt13 . (:rectangle 507 538 27 22))
    (tgt14 . (:rectangle 23 610 27 22))
    (tgt15 . (:rectangle 749 610 27 22))))

(defparameter *event-mapping*
  '((EG-FIXATION . (:type :routine
                    :routine "Eye Movement"
                    :event-id (3)
                    :distribution "Constant"))
    (MOUSE-MOVE . (:type :routine
                   :routine "Mouse Move"
                   :event-id (4)
                   :distribution "Constant"))
    (MOUSE-CLICK . (:type :routine
                    :routine "Prepped Mouse Click"
                    :event-id (3)
                    :distribution "Constant"))
))

(defparameter *interrupts*
  '(("System Resource" "Perceptual Operator")))
